@page "/checksinature"
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IApiService ApiService
@using Data
@using Services
@using Newtonsoft.Json;

<RadzenText TextStyle="TextStyle.H3">Check signature</RadzenText>
<hr />



<RadzenRow>
    <RadzenColumn SizeLG="12" SizeMD="12" Size="12">
        <RadzenRow>
            <RadzenColumn SizeLG="2" SizeMD="2" SizeSM="2" Size="12">
                <RadzenText class="text-center">Identification signature:</RadzenText>
            </RadzenColumn>
            <RadzenColumn SizeLG="8" SizeMD="8" SizeSM="8" Size="8">
                <RadzenTextBox Placeholder="Enter identification" class="form-control rz-ml-2 " @bind-Value="idsinature"></RadzenTextBox>
            </RadzenColumn>
            <RadzenColumn SizeLG="2" SizeMD="2" SizeSM="2" Size="4">
                <RadzenButton Icon="note_add" Text="File" class="rz-background-color-info-darker" Click=ShowInlineDialog />
            </RadzenColumn>
        </RadzenRow>
    </RadzenColumn>
</RadzenRow>

<RadzenRow class="rz-mt-2">
    <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12" Size=" 12">
        <RadzenTextArea Rows="16" class="form-control" @bind-Value="fileContent" />
    </RadzenColumn>

</RadzenRow>
<RadzenRow class="rz-mt-3 ">
    <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12" Size=" 12">
        <RadzenButton Text="Check" Style="float:inline-end" class=" rz-background-color-info-light rz-ml-3" Click="CheckSign" />
    </RadzenColumn>
</RadzenRow>
@code {

    //Modal
    async Task ShowInlineDialog()
    {
    var result = await DialogService.OpenAsync("Upload File", ds =>
    @<RadzenStack Gap="1.5rem">
        <InputFile OnChange="HandleFileSelected" class="form-control" accept=".txt, .json" />
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
            <RadzenButton Text="Add" Click="HandleSubmit" Style="width: 80px;" />
        </RadzenStack>
    </RadzenStack>
    );
    }

    private IBrowserFile selectedFile;
    private string fileContent;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task HandleSubmit()
    {
        if (selectedFile != null)
        {
            if (selectedFile.ContentType == "text/plain" || selectedFile.ContentType == "application/json")
            {
                using (var stream = selectedFile.OpenReadStream())
                using (var reader = new StreamReader(stream))
                {
                    fileContent = await reader.ReadToEndAsync();
                }
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Hãy chọn file .json hoặc .txt");

            }
            selectedFile = null;
            DialogService.Close(true);
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hãy chọn file");

        }
    }



    private string idsinature;
    private List<object> entries = new List<object>();
    private ResponseApi<string> responseCheckSign;

    private async Task CheckSign()
    {
        if (!string.IsNullOrEmpty(fileContent) && !string.IsNullOrEmpty(idsinature))
        {
            try
            {
                Sinature<object> data = JsonConvert.DeserializeObject<Sinature<object>>(fileContent);
                if (data != null && data.entry != null && data.entry.Any())
                {
                    entries.AddRange(data.entry);

                    responseCheckSign = await ApiService.CheckSign(idsinature, entries);

                    if (responseCheckSign.code == "200")
                    {
                        NotificationService.Notify(NotificationSeverity.Success, responseCheckSign.message);
                    }
                    else
                    {
                        NotificationService.Notify(NotificationSeverity.Error, responseCheckSign.message);
                    }
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Không có dữ liệu entry");
                }
            }
            catch (JsonException)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Dữ liệu không hợp lệ");
            }
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hãy nhập đầy đủ các thông tin");
        }

        entries = new List<object>();
        idsinature = "";
        fileContent = "";
    }
    
}
