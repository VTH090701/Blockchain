@page "/checktransaction"
@inject IApiService ApiService
@inject NotificationService NotificationService
@using System.Text.RegularExpressions;
@using Data
@using Services

<RadzenText TextStyle="TextStyle.H3">Add transaction</RadzenText>
<hr />


<RadzenRow>
    <RadzenColumn SizeLG="12" SizeMD="12" Size="12">
        <RadzenRow>
            <RadzenColumn SizeLG="2" SizeMD="2" SizeSM="2" Size="12">
                <RadzenText class="text-center">Identification transaction:</RadzenText>
            </RadzenColumn>
            <RadzenColumn SizeLG="8" SizeMD="8" SizeSM="8" Size="8">
                <RadzenTextBox Placeholder="Enter identification" class="form-control rz-ml-2 " @bind-value="iftran" ></RadzenTextBox>
            </RadzenColumn>
            <RadzenColumn SizeLG="2" SizeMD="2" SizeSM="2" Size="4">
                <RadzenButton Text="Check" class="rz-background-color-info-light" Click="Checktran" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenColumn>
</RadzenRow>
@if (result != null)
{
    <RadzenRow class="rz-mt-2">
        <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12" Size=" 12">
            <RadzenTextArea Rows="17" class="form-control mt-2" @bind-Value="result" />
        </RadzenColumn>
    </RadzenRow>
}


@code {

    private string iftran;
    private ResponseApi<object> responiftran;
    private string result;

    private async Task Checktran()
    {
        if (!string.IsNullOrEmpty(iftran))
        {
            responiftran = await ApiService.CheckTran(iftran);
            if (responiftran.code == "200")
            {
                NotificationService.Notify(NotificationSeverity.Success, responiftran.message);
                string decodedJsonString = responiftran.value.ToString();
                result = UnicodeHelper.DecodeUnicode(decodedJsonString);

            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, responiftran.message);
            }

        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hãy nhập ID Transaction");

        }
        iftran = "";
    }
    
     
    public class UnicodeHelper
    {
        public static string DecodeUnicode(string unicodeString)
        {
            return Regex.Replace(unicodeString, @"\\u(?<Value>[a-zA-Z0-9]{4})", m =>
            {
                return ((char)int.Parse(m.Groups["Value"].Value, System.Globalization.NumberStyles.HexNumber)).ToString();
            });
        }
    }

}
